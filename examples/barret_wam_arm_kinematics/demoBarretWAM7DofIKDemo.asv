clc; clear;
addpath([pwd '/animate'])
addpath([pwd '/kinematics'])
addpath([pwd '/dynamics'])
%% Setup the world
% create the robot
[twists, g_zero] = createBarretWam7Dof();
% marker is 0 cm past the end of the tool mount (positive z in tool frame)
p_t = [0 0 0 1]';

%% Setup the IK problem to solve
% velocities are defined as spatial velocities, with a translational
% velocity v_t, and angular velocity w:
%   v_s = [v_t; w]
theta_start = (0.1:0.1:0.7)';
g_theta = expTwist(twists, theta_start);
g_start = g_theta(:,:,end) * g_zero;
g_desired = pose2homogeneous([0.46320, 1.16402, 2.22058, -0.29301, 0.41901, 0.84979, 0.12817]');

%% Use feedback control style IK to find the correct joint angles at the target
Kp = [eye(3) zeros(3); zeros(3) 0.05*zeros(3)];
row_
dt = 0.001;
damping = 0.01;
% damping = 0;

theta = theta_start;
g_current = g_start;
e = calculateError(g_desired, g_current);

i = 1;
marker = zeros(1e4, 4);
marker(1, :) = g_start * p_t;
while norm(e(1:3)) > 1e-4 && i < size(marker, 1)
    v_body = Kp*e;
    J_b = bodyJacobian(twists, theta, g_current);
    J_b = J_b(1:3,:);
%     d_theta = (J_b \ v_body(1:3)) * dt;
    d_theta = (J_b'/(J_b*J_b' + damping^2*eye(3))) * v_body * dt;
    v_body
    J_b * d_theta
    
    theta = theta + d_theta;
    g_theta = expTwist(twists, theta);
    g_current = g_theta(:,:,end) * g_zero;
    e = calculateError(g_desired, g_current);

    i = i+1;
    marker(i, :) = g_current * p_t;
end
marker = marker(1:i-1,:);

fig = figure(1); clf( fig );
plot3(marker(:, 1), marker(:, 2), marker(:, 3), 'b')
drawFrame(g_start, 0.02);
drawFrame(g_desired, 0.01);

% %% 3.3 - desired 2
% % theta = (0.1:0.1:0.7)';
% % K = 2*[eye(3) zeros(3); zeros(3) 0.05*eye(3)];
% % dt = 0.001;
% % 
% % g_theta = expTwist(twist, theta) * g_zero;
% % x_start_spatial = [g_theta(1:3, 4); rot2quat(g_theta(1:3, 1:3))];
% % x_desired_spatial_2 = [0.49796, 0.98500, 2.34041, -0.11698, 0.07755, 0.82524, 0.54706]';
% % 
% % e = poseError(x_desired_spatial_2, x_current_spatial);
% % v_spatial = K*e;
% % 
% % f = fopen('prob3_3_desired2.txt', 'w');
% % marker2 = zeros(size(marker1));
% % i = 1;
% % 
% % while norm(e) > 1e-4 && i <= size(marker2, 1)
% %     d_theta = dt*pinv(spatialJacobian(twist, theta))*v_spatial;
% %     
% %     theta = theta + d_theta;
% %     g_theta = expTwist(twist, theta) * g_zero;
% %     
% %     x_current_spatial = [g_theta(1:3, 4); rot2quat(g_theta(1:3, 1:3))];
% %     e = poseError(x_desired_spatial_2, x_current_spatial);
% %     v_spatial = K*e;
% %     fprintf(f, '%f %f %f %f %f %f %f\n', theta);
% % 
% %     marker2(i, :) = expTwist(twist, theta) * g_zero * p_t;
% %     
% %     i = i+1;
% % end
% % fclose(f);
% % theta
% % 
% %% 3.4 - desired 1
% theta = (0.1:0.1:0.7)';
% % K = 0.5*eye(6);%2*[eye(3) zeros(3); zeros(3) 0.05*eye(3)];
% dt = 0.001;
% damping = 0.1;
% 
% g_theta = expTwist(twists, theta) * g_zero;
% x_current = [g_theta(1:3, 4); rot2quat(g_theta(1:3, 1:3))];
% x_desired_spatial_1 = [0.46320, 1.16402, 2.22058, -0.29301, 0.41901, 0.84979, 0.12817]';
% 
% e = poseError(x_desired_spatial_1, x_current);
% v_spatial = K*e;
% 
% marker_damp1 = zeros(size(marker1));
% i = 1;
% 
% while norm(e(1:3)) > 1e-4 && i <= size(marker_damp1, 1)
%     J = spatialJacobian(twists, theta);
%     d_theta = dt*(J'/(J*J' + damping^2*eye(6)))*v_spatial;
%     
%     theta = theta + d_theta;
%     g_theta = expTwist(twists, theta) * g_zero;
%     
%     x_current = [g_theta(1:3, 4); rot2quat(g_theta(1:3, 1:3))];
%     e = poseError(x_desired_spatial_1, x_current);
%     v_spatial = K*e;
%     
%     marker_damp1(i, :) = expTwist(twists, theta) * g_zero * p_t;
%     
%     i = i+1;
% end
% theta
% % 
% % %% 3.4 - desired 2
% % theta = (0.1:0.1:0.7)';
% % K = 2*[eye(3) zeros(3); zeros(3) 0.05*eye(3)];
% % dt = 0.001;
% % damping = 0.1;
% % 
% % g_theta = expTwist(twist, theta) * g_zero;
% % x_current_spatial = [g_theta(1:3, 4); rot2quat(g_theta(1:3, 1:3))];
% % x_desired_spatial_2 = [0.49796, 0.98500, 2.34041, -0.11698, 0.07755, 0.82524, 0.54706]';
% % 
% % e = poseError(x_desired_spatial_2, x_current_spatial);
% % v_spatial = K*e;
% % 
% % f = fopen('prob3_4_desired2.txt', 'w');
% % marker_damp2 = zeros(size(marker2));
% % i = 1;
% % 
% % while norm(e) > 1e-4 && i <= size(marker_damp2, 1)
% %     J = spatialJacobian(twist, theta);
% %     d_theta = dt*(J'/(J*J' + damping^2*eye(6)))*v_spatial;
% %     
% %     theta = theta + d_theta;
% %     g_theta = expTwist(twist, theta) * g_zero;
% %     
% %     x_current_spatial = [g_theta(1:3, 4); rot2quat(g_theta(1:3, 1:3))];
% %     e = poseError(x_desired_spatial_2, x_current_spatial);
% %     v_spatial = K*e;
% %     %instead of just K*e, use v_s_desired = e(1:3) - cross(e(4:6), tip_location)
% %     fprintf(f, '%f %f %f %f %f %f %f\n', theta);
% %     
% %     marker_damp2(i, :) = expTwist(twist, theta) * g_zero * p_t;
% %     
% %     i = i+1;
% % end
% % fclose(f);
% % theta
% 
% %%
% figure(1); clf;
% hold on
% plot3(marker1(:, 1), marker1(:, 2), marker1(:, 3), 'b')
% plot3(marker_damp1(:, 1), marker_damp1(:, 2), marker_damp1(:, 3), 'r')
% 
% plot3(x_start(1), x_start(2), x_start(3), 'k+', 'MarkerSize', 30)
% plot3(x_desired_spatial_1(1), x_desired_spatial_1(2), x_desired_spatial_1(3), 'm+', 'MarkerSize', 30)
% 
% xlabel('x'); ylabel('y'); zlabel('z')
% legend('original', 'damped', 'start', 'end', 'Location', 'SouthEast');
% title('Desired 1');
% % 
% % 
% % figure(2);clf;
% % hold on
% % plot3(marker2(:, 1), marker2(:, 2), marker2(:, 3), 'b')
% % plot3(marker_damp2(:, 1), marker_damp2(:, 2), marker_damp2(:, 3), 'r')
% % 
% % plot3(x_start_spatial(1), x_start_spatial(2), x_start_spatial(3), 'k+', 'MarkerSize', 30)
% % plot3(x_desired_spatial_2(1), x_desired_spatial_2(2), x_desired_spatial_2(3), 'm+', 'MarkerSize', 30)
% % 
% % xlabel('x'); ylabel('y'); zlabel('z')
% % legend('original', 'damped', 'start', 'end');
% % title('Desired 2');